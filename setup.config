# main configuration to setup the network
# usage - run multiNodeLearning.py file
# to save different setting to run expect results


[Global]
numSteps = 30000
numChans = 6
ChannelAssignType = typeIn  

# The type of each node 
# 0 'legacy'  - Legacy (Dumb) Node 
# 1 'hopping' - Hopping Node
# 2 'im'      - Intermittent Node/ im Node
# 3 'dsa'     - DSA node (just avoids)  
# 4 'possion' - possion Node
    
# 10 'mdp'          - MDP Node
# 11 'dqn'          - a. DQN Node
# 12 'dqnDouble'    - b. DQN-DoubleQ
# 13 'dqnPriReplay' - c. DQN-PriReplay
# 14 'dqnDuel'      - d. DQN-Duel   
# 15 'dqnRef'       - e. DQ-Refined
# 16 'dpg'          - DPG policy gredient
# 17 'ac'           - Actor Critic
# 18 'ddpg'         - Distributed Proximal Policy Optimization  (T.B.D)
# 19 'a3cDiscrete'  - A3C discrete action
# 20 'a3cDistribute'
# 21 'a3cRNN'
# 22 'dqnDynamic'
# 22 'dppo'    
    
# partial obervation    
# 30 'dqnPad'       - pad till full observation DQN 
# 31 'dqnPo'        - shorten partial observation DQN 
# 32 'dqnStack'     - stacked partial obervation as input to DQN






###################   type of node #################################
nodeTypes = [ 0,0,0, 1,2,32]
####################################################################



[legacyNode]
legacyChanList   = [0,1,2,3,4,5,6,7]
txProbability    = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0,1.0,1.0,1.0,1.0]


[hoppingNode]
hoppingChanList  = [ [3,4] ]
hoppingWidth     = 2
hopRate          = 60       


[imNode]
imChanList       = [5]                      
imDutyCircleList = [0.2, 0.8] 
imPeriod         = 100

[poissonNode]
poissonChanList  = 4 
arrivalRate      = 10
serviceRate      = 8

[noise]
noiseErrorProb   = 0.00
noiseFlipNum     = 1

[partialObservation]

poBlockNum = 3
poSeeNum = 3
poStepNum = 3

padEnable = 0

padValue = 0 
stackNum = 4


[Neural Network]
# in dqnxx.py mdp.py
# Set "explore ratio" - exploreTye, exploreDecay, exploreProbMin
# set "reward"

